#!/bin/sh

renice -n 0 -p "$$" >/dev/null

APPDATA=${APPDATA:-${HOME}/boincappdata}
BOINC_HOST=${BOINC_HOST:-localhost}
BOINC_PORT=${BOINC_PORT:-31416}
BOINC_PASS=${BOINC_PASS:-$(cat "${APPDATA}/gui_rpc_auth.cfg")}
BOINC_PORT_ARG="--gui_rpc_port ${BOINC_PORT}"
BOINCCMD_HOST_ARG="--host ${BOINC_HOST}:${BOINC_PORT}"
BOINCCMD_PASS_ARG="--passwd ${BOINC_PASS}"
BOINCCMD_ARG="${BOINCCMD_HOST_ARG} ${BOINCCMD_PASS_ARG}"
BOINC_PATH=${BOINC_PATH:-${PREFIX}/bin}
PATH="${BOINC_PATH}:${PATH}"
STARTUP=$(command -v "${STARTUP:-boinc-start}")

SCRIPT=$(echo "$0" | sed -E -e "s|$(dirname "$0")+/||")

show_help() {
	cat <<- EOF
	${SCRIPT} [options]
	Configure BOINC client settings

	Data directory [APPDATA]:     ${APPDATA}
	Startup script [STARTUP]:     ${STARTUP}
	GUI RPC Port   [BOINC_PORT]:  ${BOINC_PORT}

	Options:
	help              Show this help
	edit              Edit the script
	all               Configure all client settings manually
	pause             Pause computation
	resume            Resume computation
	sync              Force sync with projects
	sync acctmgr      Force sync with account manager
	refresh-notify    Refresh notification (Termux only)
	quit              Tell the client to exit

	Advanced options:
	power <profile>       Adjust computation based on power profile
	set cpu <int>         Set to use percentage of CPU cores
	set maxtemp <int>     Set max temperature for compute
	set minbatt <int>     Set min battery level for compute

	Profiles:     MINBATT MAXTEMP AC  BATT    USB
	default       40      90      Y   N       N
	allinac       0       37      Y   N       N
	optimumall    50      37      Y   Y       N
	usboff        -       -       -   -       N
	usbon         -       -       -   -       Y
	EOF
}

if [ "$#" -eq 0 ]; then
	show_help
	exit
fi

cd "${APPDATA}"

boinccmd_read_prefs() {
	boinccmd ${BOINCCMD_ARG} --read_global_prefs_override
}

restart_script() {
	pkill -x "$(basename ${STARTUP})"
	"${STARTUP}" &
}

set_global_prefs() {
	editor global_prefs_override.xml
	boinccmd_read_prefs
}

set_start_boinc() {
	editor "${STARTUP}"
	restart_script
}

uncomment_var() {
	sed -i "${STARTUP}" \
		-e "s|^#MIN_BATT=.*|MIN_BATT=|" \
		-e "s|^#MAX_TEMP=.*|MAX_TEMP=|" \
		-e "s|^#PWR_STA1=.*|PWR_STA1=|" \
		-e "s|^#PWR_STA2=.*|PWR_STA2=|" \
		-e "s|^#PWR_STA3=.*|PWR_STA3=|" \
		-e "s|^#MIN_TEMP=.*|MIN_TEMP=|"
}

# termux-notification
# soft limit 12 lines
# more than 12 lines truncated to 10 lines
# really hard limit until cant see a thing is approx 22 columns
boinc_stopped_notify() {
	echo "BOINC client had stopped running" | \
	termux-notification \
		--alert-once \
		--group boinc \
		--id boinc \
		--title "BOINC (Stopped)" \
		--button1 Start \
		--button1-action "${STARTUP}"
}

boinc_running_notify() {
	echo "${boinc_status}" | \
	sed -e "s|.*Tasks.*|Tasks: (Swipe to refresh)\t|" \
		-e "s|name: \(.*\)|\1 |g" \
		-e "s|active_task_state: \(.*\)|\1 |g" \
		-e "s|fraction done: \(.*\)|\1\t|g" | \
	tr -d "\n" | tr "\t" "\n" | \
	termux-notification \
		--alert-once \
		--group boinc \
		--id boinc \
		--title "BOINC (Running)" \
		--on-delete "$0 refresh-notify" \
		--button1 Resume \
		--button1-action "$0 resume" \
		--button2 Pause \
		--button2-action "$0 pause" \
		--button3 Quit \
		--button3-action "$0 quit"
}

refresh_notification() {
	boinc_status=$(boinccmd ${BOINCCMD_ARG} --get_tasks 2>&1 | \
		grep -E 'Tasks|   name|active_task_state|fraction done' | \
		sed -e 's|   ||g')
	case "${boinc_status}" in
		'') boinc_stopped_notify ;;
		*)  boinc_running_notify ;;
	esac
}

if [ "$#" -eq 1 ]; then
case "$1" in
help)
	show_help
	exit
	;;
all)
	set_global_prefs
	set_start_boinc
	exit
	;;
edit)
	# check update-alternatives
	editor "$0" || ( echo 'Error occured!' >&2 && exit 1 )
	exit
	;;
pause|suspend)
	pkill -x "$(basename ${STARTUP})"
	boinccmd ${BOINCCMD_ARG} --set_run_mode never
	echo 'Pausing computation'
	refresh_notification
	exit
	;;
resume|continue)
	restart_script
	boinccmd ${BOINCCMD_ARG} --set_run_mode auto
	echo 'Resuming computation'
	refresh_notification
	exit
	;;
sync)
	boinccmd ${BOINCCMD_ARG} --network_available
	echo 'Started syncing with projects'
	exit
	;;
refresh-notify)
	refresh_notification
	exit
	;;
quit|exit)
	boinccmd ${BOINCCMD_ARG} --quit
	echo 'Exiting client'
	refresh_notification
	exit
	;;
esac
fi

if [ "$#" -eq 2 ]; then
case "$1:$2" in
power:default)
	uncomment_var
	sed -i "${STARTUP}" \
		-e "s|^MIN_BATT=.*|MIN_BATT=90|" \
		-e "s|^MAX_TEMP=.*|MAX_TEMP=40|" \
		-e "s|^PWR_STA1=.*|PWR_STA1='PLUGGED_AC'|" \
		-e "s|^PWR_STA2=.*|#PWR_STA2='UNPLUGGED'|" \
		-e "s|^PWR_STA3=.*|#PWR_STA3='PLUGGED_USB'|"
	restart_script
	echo "Set to $*"
	exit
	;;
power:allinac)
	uncomment_var
	sed -i "${STARTUP}" \
		-e "s|^MIN_BATT=.*|MIN_BATT=0|" \
		-e "s|^MAX_TEMP=.*|MAX_TEMP=37|" \
		-e "s|^PWR_STA1=.*|PWR_STA1='PLUGGED_AC'|" \
		-e "s|^PWR_STA2=.*|#PWR_STA2='UNPLUGGED'|" \
		-e "s|^PWR_STA3=.*|#PWR_STA3='PLUGGED_USB'|"
	restart_script
	echo "Set to $*"
	exit
	;;
power:optimumall)
	uncomment_var
	sed -i "${STARTUP}" \
		-e "s|^MIN_BATT=.*|MIN_BATT=50|" \
		-e "s|^MAX_TEMP=.*|MAX_TEMP=37|" \
		-e "s|^PWR_STA1=.*|PWR_STA1='PLUGGED_AC'|" \
		-e "s|^PWR_STA2=.*|PWR_STA2='UNPLUGGED'|" \
		-e "s|^PWR_STA3=.*|#PWR_STA3='PLUGGED_USB'|"
	restart_script
	echo "Set to $*"
	exit
	;;
power:usboff)
	sed -i "${STARTUP}" \
		-e "s|^#PWR_STA3=.*|PWR_STA3=|" \
		-e "s|^PWR_STA3=.*|#PWR_STA3='PLUGGED_USB'|"
	restart_script
	echo "Set to pause computing when charging via USB"
	exit
	;;
power:usbon)
	sed -i "${STARTUP}" \
		-e "s|^#PWR_STA3=.*|PWR_STA3=|" \
		-e "s|^PWR_STA3=.*|PWR_STA3='PLUGGED_USB'|"
	restart_script
	echo "Set to resume computing when charging via USB"
	exit
	;;
sync:acctmgr)
	boinccmd ${BOINCCMD_ARG} --acct_mgr sync
	exit
	;;
esac
fi

if [ "$#" -eq 3 ]; then
if [ "$3" -ge 0 ] && [ "$3" -le 100 ]; then
case "$1:$2" in
set:cpu)
	cpu=$(nproc --all)
	count=0
	for i in $(ps -g "$(pidof -s boinc)" --no-headers -o pid); do
		count=$((count+1))
	done
	count=$((count-1)) # excluding the client
	wants=$((cpu*$3/100))
	if [ "$wants" -eq 0 ] && [ "$3" -eq 0 ]; then wants=100; fi
	sed -i global_prefs_override.xml \
		-e "s|<max_ncpus_pct>.*|<max_ncpus_pct>$3.000000</max_ncpus_pct>|"
	boinccmd_read_prefs
	echo "Set to use $3% of ${cpu} $2 cores"
	exit
	;;
set:maxtemp)
	sed -i "${STARTUP}" \
		-e "s|^MAX_TEMP=.*|MAX_TEMP=$3|"
	restart_script
	echo "Set to $3 C maximum temperature"
	exit
	;;
set:minbatt)
	sed -i "${STARTUP}" \
		-e "s|^MIN_BATT=.*|MIN_BATT=$3|"
	restart_script
	echo "Set to $3 % minimum battery level"
	exit
	;;
esac
else
	echo "ERROR: Integer must be in the range between 0 and 100" >&2
	exit 1
fi
fi

echo "ERROR: Unknown option: $*" >&2
exit 1
