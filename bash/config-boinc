#!/data/data/com.termux/files/usr/bin/env bash

renice -n 0 -p "$$" >/dev/null

APPDATA=${APPDATA:-$HOME/boincappdata}
BOINC_HOST=${BOINC_HOST:-localhost}
BOINC_PORT=${BOINC_PORT:-31416}
BOINC_PASS="${BOINC_PASS:-$(paste $APPDATA/gui_rpc_auth.cfg)}"
BOINC_PORT_ARG="--gui_rpc_port $BOINC_PORT"
BOINCCMD_HOST_ARG="--host $BOINC_HOST:$BOINC_PORT"
BOINCCMD_PASS_ARG="--passwd $BOINC_PASS"
BOINCCMD_ARG="${BOINCCMD_HOST_ARG} ${BOINCCMD_PASS_ARG}"
BOINC_PATH=${BOINC_PATH:-$PREFIX/bin}
PATH="$BOINC_PATH:$PATH"
STARTUP=${STARTUP:-start-boinc}

SCRIPT="$(echo $0 | sed -E -e "s|$(dirname $0)+/||")"

show_help() {
    echo "$SCRIPT [options]"
    echo 'Configure BOINC client settings'
    echo
    echo "Data directory: $APPDATA"
    echo "Startup script: $(which $STARTUP)"
    echo "GUI RPC Port:   $BOINC_PORT"
    echo
    echo 'Options:'
    echo 'help      Show this help'
    echo 'edit      Edit the script'
    echo 'all       Configure all client settings manually'
    echo 'pause     Pause computation'
    echo 'resume    Resume computation'
    echo
    echo 'Advanced options:'
    echo 'power <profile>       Adjust computation based on power profile'
    echo 'set cpu <int>         Set to use percentage of CPU cores'
    echo 'set maxtemp <int>     Set max temperature for compute'
    echo 'set minbatt <int>     Set min battery level for compute'
}

if [ "$#" -eq 0 ]; then
    show_help
    exit
fi

cd "$APPDATA"

boinccmd_read_prefs() {
    boinccmd ${BOINCCMD_ARG} --read_global_prefs_override
}

restart_script() {
    pkill -x "$STARTUP"
    "$STARTUP" &
}

set_global_prefs() {
    vi global_prefs_override.xml
    boinccmd_read_prefs
}

set_start_boinc() {
    vi "$(which $STARTUP)"
    restart_script
}

uncomment_var() {
    sed -e "s|^#MIN_BATT=.*|MIN_BATT=|" -i "$(which $STARTUP)"
    sed -e "s|^#MAX_TEMP=.*|MAX_TEMP=|" -i "$(which $STARTUP)"
    sed -e "s|^#PWR_STA1=.*|PWR_STA1=|" -i "$(which $STARTUP)"
    sed -e "s|^#PWR_STA2=.*|PWR_STA2=|" -i "$(which $STARTUP)"
    sed -e "s|^#PWR_STA3=.*|PWR_STA3=|" -i "$(which $STARTUP)"
    sed -e "s|^#MIN_TEMP=.*|MIN_TEMP=|" -i "$(which $STARTUP)"
}

case "$1" in
help)
    show_help
    exit
    ;;
all)
    set_global_prefs
    set_start_boinc
    exit
    ;;
edit)
    vim "$0" || vi "$0" || nano "$0" || ( echo 'Editor not found' && exit 1 )
    exit
    ;;
pause|suspend)
    pkill -x "$STARTUP"
    boinccmd ${BOINCCMD_ARG} --set_run_mode never
    echo "Pausing computation"
    exit
    ;;
resume|continue)
    restart_script
    boinccmd ${BOINCCMD_ARG} --set_run_mode auto
    echo "Resuming computation"
    exit
    ;;
esac

if [ "$#" -eq 2 ]; then
case "$1:$2" in
power:default)
    uncomment_var
    sed -e "s|^MIN_BATT=.*|MIN_BATT=90|" -i "$(which $STARTUP)"
    sed -e "s|^MAX_TEMP=.*|MAX_TEMP=40|" -i "$(which $STARTUP)"
    sed -e "s|^PWR_STA1=.*|PWR_STA1='PLUGGED_AC'|" -i "$(which $STARTUP)"
    sed -e "s|^PWR_STA2=.*|#PWR_STA2='UNPLUGGED'|" -i "$(which $STARTUP)"
    sed -e "s|^PWR_STA3=.*|#PWR_STA3='PLUGGED_USB'|" -i "$(which $STARTUP)"
    restart_script
    echo "Set to $@"
    exit
    ;;
power:allinac)
    uncomment_var
    sed -e "s|^MIN_BATT=.*|MIN_BATT=0|" -i "$(which $STARTUP)"
    sed -e "s|^MAX_TEMP=.*|MAX_TEMP=37|" -i "$(which $STARTUP)"
    sed -e "s|^PWR_STA1=.*|PWR_STA1='PLUGGED_AC'|" -i "$(which $STARTUP)"
    sed -e "s|^PWR_STA2=.*|#PWR_STA2='UNPLUGGED'|" -i "$(which $STARTUP)"
    sed -e "s|^PWR_STA3=.*|#PWR_STA3='PLUGGED_USB'|" -i "$(which $STARTUP)"
    restart_script
    echo "Set to $@"
    exit
    ;;
power:optimumall)
    uncomment_var
    sed -e "s|^MIN_BATT=.*|MIN_BATT=50|" -i "$(which $STARTUP)"
    sed -e "s|^MAX_TEMP=.*|MAX_TEMP=37|" -i "$(which $STARTUP)"
    sed -e "s|^PWR_STA1=.*|PWR_STA1='PLUGGED_AC'|" -i "$(which $STARTUP)"
    sed -e "s|^PWR_STA2=.*|PWR_STA2='UNPLUGGED'|" -i "$(which $STARTUP)"
    sed -e "s|^PWR_STA3=.*|#PWR_STA3='PLUGGED_USB'|" -i "$(which $STARTUP)"
    restart_script
    echo "Set to $@"
    exit
    ;;
power:usboff)
    sed -e "s|^#PWR_STA3=.*|PWR_STA3=|" -i "$(which $STARTUP)"
    sed -e "s|^PWR_STA3=.*|#PWR_STA3='PLUGGED_USB'|" -i "$(which $STARTUP)"
    restart_script
    echo "Set to pause computing when charging via USB"
    exit
    ;;
power:usbon)
    sed -e "s|^#PWR_STA3=.*|PWR_STA3=|" -i "$(which $STARTUP)"
    sed -e "s|^PWR_STA3=.*|PWR_STA3='PLUGGED_USB'|" -i "$(which $STARTUP)"
    restart_script
    echo "Set to resume computing when charging via USB"
    exit
    ;;
esac
fi

if [ "$#" -eq 3 ]; then
if [ "$3" -ge 0 ] && [ "$3" -le 100 ]; then
case "$1:$2" in
set:cpu)
    cpu="$(nproc)"
    count=0
    for i in $(ps -g $(pidof -s boinc) --no-headers -o pid); do
        count="$(($count+1))"
    done
    count="$(($count-1))" # excluding the client
    wants="$(($cpu*$3/100))"
    if [ "$wants" -eq 0 ] && [ "$3" -eq 0 ]; then wants=100; fi
    if [ "$count" != "$wants" ]; then
        sed -e "s|<max_ncpus_pct>.*|<max_ncpus_pct>$3.000000</max_ncpus_pct>|" -i global_prefs_override.xml
        boinccmd_read_prefs
    fi
    echo "Set to use $3% of $cpu $2 cores"
    exit
    ;;
set:maxtemp)
    sed -e "s|^MAX_TEMP=.*|MAX_TEMP=$3|" -i "$(which $STARTUP)"
    restart_script
    echo "Set to $3 C maximum temperature"
    exit
    ;;
set:minbatt)
    sed -e "s|^MIN_BATT=.*|MIN_BATT=$3|" -i "$(which $STARTUP)"
    restart_script
    echo "Set to $3 % minimum battery level"
    exit
    ;;
esac
else
    echo "ERROR: Integer must be in the range between 0 and 100" >&2
    exit 1
fi
fi

echo "ERROR: Unknown option: $@" >&2
exit 1
